// <auto-generated />
using System;
using EpicShopAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EpicShopAPI.Migrations
{
    [DbContext(typeof(EpicShopApiDBContext))]
    [Migration("20230221143448_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EpicShopAPI.Models.CartModel", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<int>("ProductModel_ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<float>("TotalAmount")
                        .HasColumnType("real");

                    b.Property<int?>("UserModelUserId")
                        .HasColumnType("int");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<string>("productname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CartId");

                    b.HasIndex("ProductModel_ProductId");

                    b.HasIndex("UserModelUserId");

                    b.ToTable("CartSet");
                });

            modelBuilder.Entity("EpicShopAPI.Models.CategoryModel", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("CategorySet");
                });

            modelBuilder.Entity("EpicShopAPI.Models.OrderModel", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<float>("AmountPaid")
                        .HasColumnType("real");

                    b.Property<int?>("CartModelCartId")
                        .HasColumnType("int");

                    b.Property<string>("ModeOfPayment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderId");

                    b.HasIndex("CartModelCartId");

                    b.ToTable("OrderSet");
                });

            modelBuilder.Entity("EpicShopAPI.Models.PreviousOrdersModel", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<float>("AmountPaid")
                        .HasColumnType("real");

                    b.Property<int?>("CartModelCartId")
                        .HasColumnType("int");

                    b.Property<string>("ModeOfPayment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderId");

                    b.HasIndex("CartModelCartId");

                    b.ToTable("PreviousOrdersSet");
                });

            modelBuilder.Entity("EpicShopAPI.Models.ProductModel", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("ProductSet");
                });

            modelBuilder.Entity("EpicShopAPI.Models.RoleModel", b =>
                {
                    b.Property<int>("UserTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserTypeId"));

                    b.Property<string>("UserTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserTypeId");

                    b.ToTable("RoleSet");
                });

            modelBuilder.Entity("EpicShopAPI.Models.UserModel", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleModelUserTypeId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("RoleModelUserTypeId");

                    b.ToTable("UserSet");
                });

            modelBuilder.Entity("EpicShopAPI.Models.WalletModel", b =>
                {
                    b.Property<int>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalletId"));

                    b.Property<int?>("CartModelCartId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentBalance")
                        .HasColumnType("int");

                    b.Property<int>("UserModel_UserId")
                        .HasColumnType("int");

                    b.HasKey("WalletId");

                    b.HasIndex("CartModelCartId");

                    b.HasIndex("UserModel_UserId");

                    b.ToTable("WalletSet");
                });

            modelBuilder.Entity("EpicShopAPI.Models.CartModel", b =>
                {
                    b.HasOne("EpicShopAPI.Models.ProductModel", "ProductModel")
                        .WithMany()
                        .HasForeignKey("ProductModel_ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EpicShopAPI.Models.UserModel", "UserModel")
                        .WithMany()
                        .HasForeignKey("UserModelUserId");

                    b.Navigation("ProductModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("EpicShopAPI.Models.OrderModel", b =>
                {
                    b.HasOne("EpicShopAPI.Models.CartModel", "CartModel")
                        .WithMany()
                        .HasForeignKey("CartModelCartId");

                    b.Navigation("CartModel");
                });

            modelBuilder.Entity("EpicShopAPI.Models.PreviousOrdersModel", b =>
                {
                    b.HasOne("EpicShopAPI.Models.CartModel", "CartModel")
                        .WithMany()
                        .HasForeignKey("CartModelCartId");

                    b.Navigation("CartModel");
                });

            modelBuilder.Entity("EpicShopAPI.Models.UserModel", b =>
                {
                    b.HasOne("EpicShopAPI.Models.RoleModel", "RoleModel")
                        .WithMany()
                        .HasForeignKey("RoleModelUserTypeId");

                    b.Navigation("RoleModel");
                });

            modelBuilder.Entity("EpicShopAPI.Models.WalletModel", b =>
                {
                    b.HasOne("EpicShopAPI.Models.CartModel", "CartModel")
                        .WithMany()
                        .HasForeignKey("CartModelCartId");

                    b.HasOne("EpicShopAPI.Models.UserModel", "UserModel")
                        .WithMany()
                        .HasForeignKey("UserModel_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CartModel");

                    b.Navigation("UserModel");
                });
#pragma warning restore 612, 618
        }
    }
}
